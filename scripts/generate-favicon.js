const fs = require('fs');
const path = require('path');

// Create a simple ICO file structure
function createIcoFile() {
  // ICO file header (6 bytes)
  const header = Buffer.from([
    0x00, 0x00,  // Reserved
    0x01, 0x00,  // Type (1 = ICO)
    0x01, 0x00   // Number of images
  ]);

  // Directory entry (16 bytes)
  const directory = Buffer.from([
    0x20,        // Width (32 pixels)
    0x20,        // Height (32 pixels)
    0x00,        // Color count (0 = no color table)
    0x00,        // Reserved
    0x01, 0x00,  // Color planes
    0x20, 0x00,  // Bits per pixel (32)
    0x00, 0x00, 0x00, 0x00,  // Size (will be filled)
    0x16, 0x00, 0x00, 0x00   // Offset (22 bytes from start)
  ]);

  // Create a simple 32x32 PNG-like data
  // This is a minimal PNG structure for a 32x32 transparent image
  const pngData = Buffer.from([
    // PNG signature
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
    // IHDR chunk
    0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
    0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7A, 0x7A,
    0xF4, 0x00, 0x00, 0x00, 0x04, 0x73, 0x42, 0x49,
    0x54, 0x08, 0x99, 0x63, 0xF8, 0xCF, 0x4F, 0x00,
    0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00,
    0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01,
    0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x07,
    0x74, 0x49, 0x4D, 0x45, 0x07, 0xE7, 0x0C, 0x1E,
    0x0B, 0x2A, 0x1A, 0x8C, 0x8C, 0x8C, 0x00, 0x00,
    0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x43, 0x6F,
    0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x43, 0x72,
    0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
    0x74, 0x68, 0x20, 0x47, 0x49, 0x4D, 0x50, 0x57,
    0x81, 0x0E, 0x17, 0x00, 0x00, 0x00, 0x0C, 0x49,
    0x44, 0x41, 0x54, 0x78, 0x9C, 0x63, 0x60, 0x18,
    0x05, 0x03, 0x00, 0x00, 0x30, 0x00, 0x00, 0x01,
    0x5D, 0x0D, 0xB0, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
  ]);

  // Update the size in directory entry
  const size = pngData.length;
  directory.writeUInt32LE(size, 8);

  // Combine all parts
  const icoData = Buffer.concat([header, directory, pngData]);

  // Write to file
  fs.writeFileSync('favicon.ico', icoData);
  console.log('‚úÖ Favicon.ico created successfully!');
  console.log(`üìÅ File size: ${icoData.length} bytes`);
}

// Alternative: Copy the existing 32x32 PNG as favicon.ico
function copyPngAsIco() {
  try {
    const sourcePath = path.join(__dirname, '../assets/favicon-32x32.png');
    const targetPath = path.join(__dirname, '../favicon.ico');
    
    if (fs.existsSync(sourcePath)) {
      fs.copyFileSync(sourcePath, targetPath);
      console.log('‚úÖ Copied favicon-32x32.png as favicon.ico');
    } else {
      console.log('‚ùå favicon-32x32.png not found');
      createIcoFile();
    }
  } catch (error) {
    console.log('‚ùå Error copying file:', error.message);
    createIcoFile();
  }
}

// Run the script
console.log('üîÑ Generating favicon.ico...');
copyPngAsIco();
